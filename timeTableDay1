'''
Program to generate time table to minimize teacher count
'''
time_slots = ["8-9", "9-10", "11-12", "12-01"]
# time slots per day
subjects = ["s1", "s2", "s3", "s4", "s5"]
# 5 subjects
days = ['mon', 'tue', 'wed', 'thur', 'fri']
# days of a week
sections = ['sec1', 'sec2', 'sec3', 'sec4', 'sec5']
# sections for each day
teachers = []

section_dict = {}

# a counter used for keeping track of subjects assigned to the nested dictionory.


def initialize(sections, days, time_slots):
    for section in sections:
        section_dict[section] = {}
        for day in days:
            section_dict[section][day]=[]
         


def build_dataStructure(sections, days, time_slots, subjects):
    subject_counter = 0
    subject_no = 0
    for section in sections:
        for day in days:
                while subject_counter < 4 :
                    if subject_no < 5 :
                        subject_no = subject_no + 1
                    else:
                        subject_no = 1
                    section_dict[section][day].append((subjects[subject_no-1]))
                    subject_counter  = subject_counter + 1
                subject_counter = 0
        
        
t_dict = {}          
     
def build_dataStructure_Teacher(sections, days, time_slots, subjects):
    teacher_count = 0
    teacher_no  = 0
    d = []
    all_list = []           
    teacher_list = []
    for section in sections:
        all_list.extend(section_dict[section]['mon'])
    for i in range(len(all_list)):
        teacher_count = teacher_count + 1
        if teacher_count == 3: teacher_no = teacher_no + 1; teacher_count = 0
        teacher_list.append(teacher_no+1)
    p = list(zip(all_list,teacher_list))

    print(p)
        
    

initialize(sections, days, time_slots)
build_dataStructure(sections, days, time_slots, subjects)
teacher_dict = section_dict.copy() 
build_dataStructure_Teacher(sections, days, time_slots, subjects)
# input_number = int(input("Enter a number between 1 to 5"))
#print(teacher_dict)


def display_table_allsection(section_table):
    return section_dict

def display_table_section(input_number):
    if input_number == 1:
        return section_dict["sec1"]
    elif input_number == 2:
        return section_dict["sec2"]
    elif input_number == 3:
        return section_dict["sec3"]
    elif input_number == 4:
        return section_dict["sec4"]
    elif input_number == 5:
        return section_dict["sec5"]
    else :
        return 0

def valid_teachers(section, hours, subjects):
    pass   # based upon the constraints mentioned

def teacher_available(time_slots, subject):
    pass # to check if the teacher is available to take that

def teacher_count(maximum_hour, no_hours_day, no_subjects,
                    subject_per_section):
    pass  # to calculate the optimal number of teachers

def table_section(section_number, time_slots, days, subject):
    pass  # time table for each section

def table_teacher(teacher_name, subject):
    pass  # generate time table for each teacher

def display_table_teacher(teacher_name, subject):
    pass  # display time table for each teache
